#    This file is part of P4wnP1.
#
#    Copyright (c) 2017, Marcus Mengs. 
#
#    P4wnP1 is free software: you can redistribute it and/or modify
#    it under the terms of the GNU General Public License as published by
#    the Free Software Foundation, either version 3 of the License, or
#    (at your option) any later version.
#
#    P4wnP1 is distributed in the hope that it will be useful,
#    but WITHOUT ANY WARRANTY; without even the implied warranty of
#    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
#    GNU General Public License for more details.
#
#    You should have received a copy of the GNU General Public License
#    along with P4wnP1.  If not, see <http://www.gnu.org/licenses/>.



# P4wnP1 demo payload by MaMe82
# ==========================


# =============================
# USB setup
# =============================
# Make sure to change USB_PID if you enable different USB functionality in order
# to force Windows to enumerate the device again
USB_VID="0x1D6B"        # Vendor ID
USB_PID="0x0237"        # Product ID

USE_ECM=true            # if true CDC ECM will be enabled
USE_RNDIS=true          # if true RNDIS will be enabled
USE_HID=false            # if true HID (keyboard) will be enabled
USE_RAWHID=false         # if true HID raw device will be enabled
USE_UMS=false           # if true USB Mass Storage will be enabled

# disable setting of static routes for all IPv4 addresses
ROUTE_SPOOF=false


WIFI_ACCESSPOINT=true
WIFI_ACCESSPOINT_NAME="P4wnP1"
WIFI_ACCESSPOINT_PSK="MaMe82-P4wnP1"
WIFI_ACCESSPOINT_IP="172.24.0.1" # IP used by P4wnP1
WIFI_ACCESSPOINT_NETMASK="255.255.255.0"
WIFI_ACCESSPOINT_DHCP_RANGE="172.24.0.2,172.24.0.100" # DHCP Server IP Range
WIFI_ACCESSPOINT_HIDE_SSID=false # don't hide ESSID 

BLUETOOTH_NAP=true # enable bluetooth NAP, P4wnP1 will be rechable via IP configured in setup.cfg (BLUETOOTH_NAP_IP)


# The AutoSSH section enables a SSH reachback to a custom external SSH server
# working like this:
#   1) the target server is defined by AUTOSSH_REMOTE_HOST, the user by
#      AUTOSSH_REMOTE_USER
#   2) P4wnP1 continuously attempts to login to this SSH server, using the 
#      private key provided with AUTOSSH_PRIVATE_KEY
#   3) In order to allow the login to succeed, the user defined by AUTOSSH_REMOTE_USER
#      has to have the public key from AUTOSSH_PUBLIC_KEY present in his
#      ~/.ssh/authorized_keys file (the scipt P4wnP1_working_dir/ssh/pushkey.sh
#      can be used to help publishing the public key to the SSH server)
#   4) As soon as P4wnP1 is able to access the Internet (for example using ICS
#      with this payload, as explained here https://youtu.be/QEWaIoal5qU) the
#      attempts to connect to the remote SSH server should succeed
#   5) On connection success, P4wnP1's SSH port 22 is forwarded to the
#      remote SSH server port given by AUTOSSH_REMOTE_PORT (only local host)
#   6) If you login in to the remote SSH server from a different device
#      you are able to connect back to P4wnP1 using
#	  ssh -p 8765 pi@localhost
#      
#      The port '8765' has to be replaced with the port configured
#      by AUTOSSH_REMOTE_PORT.
#
# Note: The public and private SSH key files used here, are generated
#       during P4wnP1 install and not packed into the P4wnP1 repo
#       (to assure a unique key pair).
#       If you want to (re)create a key pair, use the script in
#       `P4wnP1_working_dir/ssh/genkeys.sh

AUTOSSH_ENABLED=true # enable AutoSSH
AUTOSSH_REMOTE_HOST=YourSSH-server.com 
AUTOSSH_REMOTE_USER=root 
AUTOSSH_PRIVATE_KEY="$wdir/ssh/keys/P4wnP1_id"
AUTOSSH_PUBLIC_KEY="$wdir/ssh/keys/P4wnP1_id.pub" 
AUTOSSH_REMOTE_PORT=8765 
